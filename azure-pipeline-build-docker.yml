steps:
- task: DockerInstaller@0
  displayName: 'Install Docker'

- task: Docker@2
  displayName: login
  inputs:
    containerRegistry: $(SERVICE_CONNECTION_NAME)
    command: login

- task: Docker@2
  displayName: 'Load image from tar'
  inputs:
    containerRegistry: $(SERVICE_CONNECTION_NAME)
    command: load
    arguments: '--input $(Pipeline.Workspace)/telstra-core-api/$(IMAGE_NAME).image.tar'

- task: Docker@2
  displayName: 'Tag image with Latest'
  inputs:
    containerRegistry: $(SERVICE_CONNECTION_NAME)
    repository: $(IMAGE_NAME)
    command: tag
    arguments: '$(IMAGE_NAME):$(build.BuildId) $(SERVICE_CONNECTION_NAME)/$(IMAGE_NAME):$(build.BuildId):latest'

- task: AzureCLI@2
  displayName: 'Unlock image'
  inputs:
    azureSubscription: $(AZURE_SUBSCRIPTION)
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     az acr repository update --name $(CONTAINER_REGISTRY) --image $(IMAGE_NAME):latest --write-enabled true
  continueOnError: true

- task: Docker@2
  displayName: 'Push image to ACR'
  inputs:
    containerRegistry: $(SERVICE_CONNECTION_NAME)
    repository: $(IMAGE_NAME)
    command: push
    tags: |
     $(build.BuildId)
     latest

- task: AzureCLI@2
  displayName: 'Lock image'
  inputs:
    azureSubscription: $(AZURE_SUBSCRIPTION)
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
     az acr repository update --name $(CONTAINER_REGISTRY) --image $(IMAGE_NAME):latest --write-enabled false

- task: Docker@2
  displayName: logout
  inputs:
    containerRegistry: $(SERVICE_CONNECTION_NAME)
    command: logout

- task: Docker@2
  displayName: 'Clean up'
  inputs:
    containerRegistry: $(SERVICE_CONNECTION_NAME)
    command: image
    arguments: 'prune -a -f'
