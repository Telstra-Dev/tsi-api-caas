trigger:
  branches:
    include:
    - main          # for prod releases
    - develop       # for dev releases
    # note: staging is triggered by `main` branch policy

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  workingDirectory: '$(Build.SourcesDirectory)'
  isPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]
  isDevelopSourceBranch: $[eq(variables['Build.SourceBranch'], 'refs/heads/develop')]
  isReleaseSourceBranch: $[startsWith(variables['System.PullRequest.SourceBranch'], 'refs/heads/release/')]
  isHotfixSourceBranch: $[startsWith(variables['System.PullRequest.SourceBranch'], 'refs/heads/hotfix/')]
  isMainSourceBranch: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isMainTargetBranch: $[eq(variables['System.PullRequest.TargetBranch'], 'refs/heads/main')]

  SERVICE_CONNECTION_DEVELOPMENT: Smart Spaces Development 2.0 - Azure DevOps (79cd5de2-dd89-4b81-a3fc-e56bfbd20f6b)
  AGENT_POOL_DEVELOPMENT: ss2devv1pipelineagentspool
  APP_RESOURCE_GROUP_NAME_DEVELOPMENT: wca-dev
  APP_NAME_DEVELOPMENT: wca-dev-api-caas
  # TODO: this should be `inactive-slot` in future once we get working with VNETs.
  APP_SLOT_NAME_DEVELOPMENT: production

  SERVICE_CONNECTION_STAGING: Smart Spaces Staging 2.0 (9633558f-c9d5-47c8-b54b-21943d24ff57)
  AGENT_POOL_STAGING: ss2stagingv1pipelineagentspool
  APP_RESOURCE_GROUP_NAME_STAGING: wca-staging
  APP_NAME_STAGING: wca-staging-api-caas
  # TODO: this should be `inactive-slot` in future once we get working with VNETs.
  APP_SLOT_NAME_STAGING: production

  SERVICE_CONNECTION_PRODUCTION: Smart Spaces Production 2.0 (e1348aa6-a1a1-45aa-a6ba-4994d00adf28)
  AGENT_POOL_PRODUCTION: ss2prodv1pipelineagentspool
  APP_RESOURCE_GROUP_NAME_PRODUCTION: wca-prod
  APP_NAME_PRODUCTION: wca-prod-api-caas
  # TODO: this should be `inactive-slot` in future once we get working with VNETs.
  APP_SLOT_NAME_PRODUCTION: production

  APP_SHORT_CACHE_TIME: 60

  # Device Management API related
  # (currently only development environment present)
  DEV_DM_BASE_URI: https://slot5.org005.t-dev.telstra.net/
  DEV_DM_ACCESS_TOKEN_URI: v2/oauth/token
  DEV_DM_RTSP_FEED_URI: v1/iot-shared-test/v1/devices/{0}/modules/platformAzureEdge/commands
  DEV_DM_CLIENT_ID: GcBBZtgHx5YzpSSwBOrwOALsdwApY4om
  DEV_DM_CLIENT_SECRET: 0fNj3vqJqZXJcBoL
  DEV_DM_GRANT_TYPE: client_credentials

stages:
  - stage: build
    dependsOn: []
    displayName: Build
    jobs:
      - job: api
        displayName: build, test and package api
        variables:
          #frontendDirectory: ./api
          CI: true
        steps:
          - task: UseDotNet@2
            displayName: Install .NET 6 SDK
            inputs:
              packageType: 'sdk'
              version: '6.x'

          - script: dotnet build ./wca-api-consumer.sln --configuration $(buildConfiguration)
            displayName: Build
            workingDirectory: $(workingDirectory)

          - task: DotNetCoreCLI@2
            inputs:
              command: publish
              projects: '**/WCA.Consumer.Api.csproj'
              publishWebProjects: false
              arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
              zipAfterPublish: true
              workingDirectory: $(workingDirectory)

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
              artifactName: 'wca-api-consumer'

  - stage: test
    dependsOn: ["build"]
    displayName: Test
    condition:
      succeeded()
    jobs:
      - job: api
        displayName: Test Apis
        steps:
          - task: UseDotNet@2
            displayName: 'Install .NET Core SDK 6.0'
            inputs:
              packageType: sdk
              version: 6.x
              performMultiLevelLookup: true
              includePreviewVersions: false # Required for preview versions
          - task: DotNetCoreCLI@2
            displayName: 'Run Tests'
            inputs:
              command: 'test'
              arguments : '-v normal --logger trx'
              configuration: release
              projects: 'WCA.Consumer.Api.Tests'

          - script: |
              if ! command -v coverlet &> /dev/null
              then
                dotnet tool install --global coverlet.console
              fi
              dotnet build WCA.Consumer.Api.Tests -c Release
              coverlet ./WCA.Consumer.Api.Tests/bin/Release/net6.0/WCA.Consumer.Api.Tests.dll --target "dotnet" --targetargs "test ./WCA.Consumer.Api.Tests -c Release --no-build -v normal" --format cobertura --exclude "[Telstra.Core.*]*" --exclude "[Telstra.Common]*" --exclude "[*]Telstra.Core.*" --exclude "[*]WCA.Storage.*"
            displayName: Test Coverage
            workingDirectory: $(Build.SourcesDirectory)

          - task: PublishCodeCoverageResults@1
            displayName: Publish Test Coverage Results
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

  - stage: deployToDevelopment
    dependsOn: ["test"]
    displayName: Deploy to Development
    condition:
      or(
        and(
          succeeded(),
          eq(variables.isPullRequest, 'false'),
          eq(variables.isDevelopSourceBranch, 'true')
        ),
          eq(variables['Build.Reason'], 'Manual')
      )
    # variables:
    # - group: wca-api-business-deploy-development
    jobs:
      - deployment: deployToDevelopment
        pool: $(AGENT_POOL_DEVELOPMENT)
        displayName: Deploy to Development
        environment: wca-api-business-development
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: |
                    sudo apt-get update
                    sudo apt-get install -y wget apt-transport-https software-properties-common unzip
                    
                  displayName: Setup Prequisites
                - template: deployment-steps.yml
                  parameters:
                    adosServiceConnectionName: $(SERVICE_CONNECTION_DEVELOPMENT)
                    resourceGroupName: $(APP_RESOURCE_GROUP_NAME_DEVELOPMENT)
                    appName: $(APP_NAME_DEVELOPMENT)
                    appSlotName: $(APP_SLOT_NAME_DEVELOPMENT)
                    appShortCacheTime: $(APP_SHORT_CACHE_TIME)
                    dmBaseUri: $(DEV_DM_BASE_URI)
                    dmAccessTokenUri: $(DEV_DM_ACCESS_TOKEN_URI)
                    dmRtspFeedUri: $(DEV_DM_RTSP_FEED_URI)
                    dmClientId: $(DEV_DM_CLIENT_ID)
                    dmClientSecret: $(DEV_DM_CLIENT_SECRET)
                    dmGrantType: $(DEV_DM_GRANT_TYPE)

  - stage: deployToStaging
    dependsOn: ["test"]
    displayName: Deploy to Staging
    condition:
      or(
        and(
          succeeded(),
          eq(variables.isPullRequest, 'false'),
          eq(variables.isDevelopSourceBranch, 'true')
        ),
          eq(variables['Build.Reason'], 'Manual')
      )
    # variables:
    # - group: wca-api-business-deploy-staging
    jobs:
      - deployment: deployToStaging
        pool: $(AGENT_POOL_STAGING)
        displayName: Deploy to Staging
        environment: wca-api-business-staging
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: |
                    sudo apt-get update
                    sudo apt-get install -y wget apt-transport-https software-properties-common unzip
                    
                  displayName: Setup Prequisites
                - template: deployment-steps.yml
                  parameters:
                    adosServiceConnectionName: $(SERVICE_CONNECTION_STAGING)
                    resourceGroupName: $(APP_RESOURCE_GROUP_NAME_STAGING)
                    appName: $(APP_NAME_STAGING)
                    appSlotName: $(APP_SLOT_NAME_STAGING)
                    appShortCacheTime: $(APP_SHORT_CACHE_TIME)
                    dmBaseUri: $(DEV_DM_BASE_URI)
                    dmAccessTokenUri: $(DEV_DM_ACCESS_TOKEN_URI)
                    dmRtspFeedUri: $(DEV_DM_RTSP_FEED_URI)
                    dmClientId: $(DEV_DM_CLIENT_ID)
                    dmClientSecret: $(DEV_DM_CLIENT_SECRET)
                    dmGrantType: $(DEV_DM_GRANT_TYPE)

  - stage: deployToProduction
    dependsOn: ["test"]
    displayName: Deploy to Production
    condition:
      or(
        and(
          succeeded(),
          eq(variables.isPullRequest, 'false'),
          eq(variables.isDevelopSourceBranch, 'true')
        ),
          eq(variables['Build.Reason'], 'Manual')
      )
    # variables:
    # - group: wca-api-business-deploy-production
    jobs:
      - deployment: deployToProduction
        pool: $(AGENT_POOL_PRODUCTION)
        displayName: Deploy to Production
        environment: wca-api-business-production
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: |
                    sudo apt-get update
                    sudo apt-get install -y wget apt-transport-https software-properties-common unzip
                    
                  displayName: Setup Prequisites
                - template: deployment-steps.yml
                  parameters:
                    adosServiceConnectionName: $(SERVICE_CONNECTION_PRODUCTION)
                    resourceGroupName: $(APP_RESOURCE_GROUP_NAME_PRODUCTION)
                    appName: $(APP_NAME_PRODUCTION)
                    appSlotName: $(APP_SLOT_NAME_PRODUCTION)
                    appShortCacheTime: $(APP_SHORT_CACHE_TIME)
                    dmBaseUri: $(DEV_DM_BASE_URI)
                    dmAccessTokenUri: $(DEV_DM_ACCESS_TOKEN_URI)
                    dmRtspFeedUri: $(DEV_DM_RTSP_FEED_URI)
                    dmClientId: $(DEV_DM_CLIENT_ID)
                    dmClientSecret: $(DEV_DM_CLIENT_SECRET)
                    dmGrantType: $(DEV_DM_GRANT_TYPE)
